diff --git a/config/schema/fastly.schema.yml b/config/schema/fastly.schema.yml
index 2b6bb13..d84786a 100644
--- a/config/schema/fastly.schema.yml
+++ b/config/schema/fastly.schema.yml
@@ -8,3 +8,12 @@ fastly.settings:
     service_id:
       type: string
       label: 'Fastly Service ID'
+    purge_method:
+      type: string
+      label: 'Fastly Purge Method'
+    max_age:
+      type: integer
+      label: 'Fastly Cache Max Age'
+    revalidate:
+      type: integer
+      label: 'Fastly Stale While Revalidation'
diff --git a/src/Api.php b/src/Api.php
index c528729..a5f1ffb 100644
--- a/src/Api.php
+++ b/src/Api.php
@@ -8,6 +8,7 @@
 namespace Drupal\Fastly;
 
 use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\fastly\Form\FastlySettingsForm;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
 use Psr\Log\LoggerInterface;
@@ -25,6 +26,27 @@ class Api {
   protected $logger;
 
   /**
+   * The purge method (instant / soft).
+   *
+   * @var string
+   */
+  private $purgeMethod;
+
+  /**
+   * The number in seconds until fastly revalidates the cache.
+   *
+   * @var int
+   */
+  private $maxAge;
+
+  /**
+   * The number in seconds to show stale content while fastly revalidates.
+   *
+   * @var int
+   */
+  private $revalidate;
+
+  /**
    * Constructs a \Drupal\fastly\Api object.
    *
    * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
@@ -41,6 +63,9 @@ class Api {
 
     $this->apiKey = $config->get('api_key');
     $this->serviceId = $config->get('service_id');
+    $this->purgeMethod = $config->get('purge_method');
+    $this->maxAge = $config->get('max_age');
+    $this->revalidate = $config->get('revalidate');
 
     $this->host = $host;
     $this->httpClient = $http_client;
@@ -144,16 +169,23 @@ class Api {
 
         $result = $this->json($response);
         if ($result->status === 'ok') {
-          $this->logger->info('Successfully purged the key %key. Purge ID: %id.', [
+
+          $this->logger->info('Successfully purged the key %key. Purge ID: %id. Purge Method: %purge_method. Max-Age: %max_age. Revalidate: %revalidate.', [
             '%key' => $key,
             '%id' => $result->id,
+            '%purge_method' => $this->purgeMethod,
+            '%max_age' => $this->maxAge,
+            '%revalidate' => $this->revalidate,
           ]);
         }
         else {
-          $this->logger->critical('Unable to purge the key %key was purged from Fastly. Response status: %status. Purge ID: %id.', [
+          $this->logger->critical('Unable to purge the key %key was purged from Fastly. Response status: %status. Purge ID: %id. Purge Method: %purge_method. Max-Age: %max_age. Revalidate: %revalidate.', [
             '%key' => $key,
             '%status' => $result->status,
             '%id' => $result->id,
+            '%purge_method' => $this->purgeMethod,
+            '%max_age' => $this->maxAge,
+            '%revalidate' => $this->revalidate,
           ]);
         }
       }
@@ -187,6 +219,17 @@ class Api {
         $data['headers'] = $headers;
         $data['headers']['Accept'] = 'application/json';
         $data['headers']['Fastly-Key'] = $this->apiKey;
+
+        // If the module is configured to use soft purging, we need to add
+        // another header information.
+        if ($this->purgeMethod == FastlySettingsForm::FASTLY_SOFT_PURGE) {
+          $data['headers']['Fastly-Soft-Purge'] = 1;
+          $data['headers']['Cache-Control'] = sprintf(
+            'max-age=%s, stale-while-revalidate=%s',
+            $this->maxAge,
+            $this->revalidate
+          );
+        }
       }
       switch (strtoupper($method)) {
         case 'GET':
diff --git a/src/Form/FastlySettingsForm.php b/src/Form/FastlySettingsForm.php
index fc2214a..2ee149b 100644
--- a/src/Form/FastlySettingsForm.php
+++ b/src/Form/FastlySettingsForm.php
@@ -18,6 +18,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class FastlySettingsForm extends ConfigFormBase {
 
   /**
+   * Constants for the values of instant and soft purge methods.
+   */
+  const FASTLY_INSTANT_PURGE = 'instant';
+  const FASTLY_SOFT_PURGE = 'soft';
+
+  /**
    * The Fastly API.
    *
    * @var \Drupal\Fastly\Api
@@ -88,6 +94,31 @@ class FastlySettingsForm extends ConfigFormBase {
       '#suffix' => '</div>',
     );
 
+    $form['purge_method'] = [
+      '#type' => 'radios',
+      '#title' => $this->t('Purge method'),
+      '#description' => $this->t("Here you can switch between Fastly's Instant-Purge and Soft-Purge methods."),
+      '#default_value' => $config->get('purge_method') ?: self::FASTLY_INSTANT_PURGE,
+      '#options' => [
+        self::FASTLY_INSTANT_PURGE => $this->t('Use instant purge'),
+        self::FASTLY_SOFT_PURGE => $this->t('Use soft purge'),
+      ],
+    ];
+
+    $form['max_age'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Cache Max-Age'),
+      '#description' => $this->t('The number in seconds content should be cached by fastly.'),
+      '#default_value' => $config->get('max_age') ?: 0,
+    ];
+
+    $form['revalidate'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Cache revalidation'),
+      '#description' => $this->t('The number in seconds to show stale content while cache revalidation.'),
+      '#default_value' => $config->get('revalidate') ?: 0,
+    ];
+
     return parent::buildForm($form, $form_state);
   }
 
@@ -114,6 +145,7 @@ class FastlySettingsForm extends ConfigFormBase {
     $this->config('fastly.settings')
       ->set('api_key', $form_state->getValue('api_key'))
       ->set('service_id', $form_state->getValue('service_id'))
+      ->set('purge_method', $form_state->getValue('purge_method'))
       ->save();
 
     parent::submitForm($form, $form_state);
